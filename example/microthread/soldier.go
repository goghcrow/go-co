//go:build !co

// Code generated by github.com/goghcrow/go-co DO NOT EDIT.
package microthread

import (
	ʂɘʠ "github.com/goghcrow/go-co/seq"
	"math/rand"
	"time"
)

type Soldier struct {
	AnimateReload *Signal
}

func NewSoldier(animateReload *Signal) *Soldier {
	return &Soldier{
		AnimateReload: animateReload,
	}
}

func (s *Soldier) Init(shed *Sched) {
	shed.AddTask(s.Patrol())
}

//	func (s *Soldier) Patrol() (_ Iter[State]) {
//		for s.Alive() {
//			if s.CanSeeTarget() {
//				YieldFrom(s.Attack())
//			} else if s.InReloadStation() {
//				Yield(s.AnimateReload)
//			} else {
//				s.MoveTowardsNextWayPoint()
//				Yield(WaitFor(time.Second))
//			}
//		}
//		return
//	}
func (s *Soldier) Patrol() (_ ʂɘʠ.Iterator[State]) {
	return ʂɘʠ.Start[State](
		ʂɘʠ.Combine[State](
			ʂɘʠ.While[State](
				s.Alive,
				ʂɘʠ.Delay[State](func() ʂɘʠ.Seq[State] {
					if s.CanSeeTarget() {
						return ʂɘʠ.Delay[State](func() ʂɘʠ.Seq[State] {
							ɪʇ := s.Attack()
							return ʂɘʠ.While[State](
								ɪʇ.MoveNext,
								ʂɘʠ.Delay[State](func() ʂɘʠ.Seq[State] {
									ʌ := ɪʇ.Current()
									return ʂɘʠ.Bind[State](ʌ,
										ʂɘʠ.Normal[State],
									)
								}))
						})
					} else if s.InReloadStation() {
						return ʂɘʠ.Bind[State](s.AnimateReload,
							ʂɘʠ.Normal[State],
						)
					} else {

						s.MoveTowardsNextWayPoint()
						return ʂɘʠ.Bind[State](WaitFor(time.Second),
							ʂɘʠ.Normal[State],
						)
					}
				})),

			ʂɘʠ.Return[State](),
		),
	)

}

//	func (s *Soldier) Attack() (_ Iter[State]) {
//		for s.TargetAlive() && s.CanSeeTarget() {
//			s.AimAtTarget()
//			s.Fire()
//			Yield(WaitFor(time.Second))
//		}
//		return
//	}
func (s *Soldier) Attack() (_ ʂɘʠ.Iterator[State]) {
	return ʂɘʠ.Start[State](
		ʂɘʠ.Combine[State](
			ʂɘʠ.While[State](func() bool {
				return s.TargetAlive() && s.CanSeeTarget()
			}, ʂɘʠ.Delay[State](func() ʂɘʠ.Seq[State] {

				s.AimAtTarget()
				s.Fire()
				return ʂɘʠ.Bind[State](WaitFor(time.Second),
					ʂɘʠ.Normal[State],
				)
			})),

			ʂɘʠ.Return[State](),
		),
	)

}

func (s *Soldier) InReloadStation() bool {
	inReloadStation := rand.Intn(5) == 0
	if inReloadStation {
		println("InReloadStation")
	}
	return inReloadStation
}

func (s *Soldier) Alive() bool {
	return true
}

func (s *Soldier) CanSeeTarget() bool {
	return rand.Intn(3) != 0
}

func (s *Soldier) TargetAlive() bool {
	return rand.Intn(2) == 0
}

func (s *Soldier) AimAtTarget() {
	println("AimAtTarget")
}

func (s *Soldier) Fire() {
	println("Fire")
}

func (s *Soldier) MoveTowardsNextWayPoint() {
	println("MoveTowardsNextWayPoint")
}
