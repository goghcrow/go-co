//go:build !co

// Code generated by github.com/goghcrow/go-co DO NOT EDIT.
package linq

import (
	ʂɘʠ "github.com/goghcrow/go-co/seq"
)

//	func Of[A any](xs ...A) (_ Iter[A]) {
//		for _, x := range xs {
//			Yield(x)
//		}
//		return
//	}
func Of[A any](xs ...A) (_ ʂɘʠ.Iterator[A]) {
	return ʂɘʠ.Start[A](ʂɘʠ.Delay[A](func() ʂɘʠ.Seq[A] {
		ɪʇ1 := ʂɘʠ.NewSliceIter(xs)
		return ʂɘʠ.Combine[A](
			ʂɘʠ.While[A](
				ɪʇ1.MoveNext,
				ʂɘʠ.Delay[A](func() ʂɘʠ.Seq[A] {
					x := ɪʇ1.Current().Val
					return ʂɘʠ.Delay[A](func() ʂɘʠ.Seq[A] {
						return ʂɘʠ.Bind[A](x,
							ʂɘʠ.Normal[A],
						)
					})
				})),

			ʂɘʠ.Return[A](),
		)
	}))

}

//	func Range(start, end int, stepOpt ...int) (_ Iter[int]) {
//		step := 1
//		if len(stepOpt) > 0 {
//			step = stepOpt[0]
//		}
//		for i := start; i < end; i += step {
//			Yield(i)
//		}
//		return
//	}
func Range(start, end int, stepOpt ...int) (_ ʂɘʠ.Iterator[int]) {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		step := 1
		if len(stepOpt) > 0 {
			step = stepOpt[0]
		}
		return ʂɘʠ.Combine[int](
			ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

				i := start
				return ʂɘʠ.For[int](func() bool {
					return i < end
				}, func() {
					i += step
				}, ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Bind[int](i,
						ʂɘʠ.Normal[int],
					)
				}))
			}),

			ʂɘʠ.Return[int](),
		)
	}))

}

type (
	Selector[A, R any] func(A) R
	Predicate[A any]   func(A) bool
)

// Unit / Return / Pure
// // Unit / Return / Pure
//
//	func Unit[A any](a A) (_ Iter[A]) {
//		Yield(a)
//		return
//	}
func Unit[A any](a A) (_ ʂɘʠ.Iterator[A]) {
	return ʂɘʠ.Start[A](ʂɘʠ.Delay[A](func() ʂɘʠ.Seq[A] {
		return ʂɘʠ.Bind[A](a,
			ʂɘʠ.Return[A],
		)
	}))

}

// SelectMany / Bind / FlatMap
// // SelectMany / Bind / FlatMap
//
//	func SelectMany[A, R any](it Iter[A], f func(A) Iter[R]) (_ Iter[R]) {
//		for a := range it {
//			YieldFrom(f(a))
//		}
//		return
//	}
func SelectMany[A, R any](it ʂɘʠ.Iterator[A], f func(A) ʂɘʠ.Iterator[R]) (_ ʂɘʠ.Iterator[R]) {
	return ʂɘʠ.Start[R](
		ʂɘʠ.Combine[R](
			ʂɘʠ.Delay[R](func() ʂɘʠ.Seq[R] {
				ɪʇ := it
				return ʂɘʠ.While[R](
					ɪʇ.MoveNext,
					ʂɘʠ.Delay[R](func() ʂɘʠ.Seq[R] {
						a := ɪʇ.Current()
						return ʂɘʠ.Delay[R](func() ʂɘʠ.Seq[R] {
							ɪʇ := f(a)
							return ʂɘʠ.While[R](
								ɪʇ.MoveNext,
								ʂɘʠ.Delay[R](func() ʂɘʠ.Seq[R] {
									ʌ := ɪʇ.Current()
									return ʂɘʠ.Bind[R](ʌ,
										ʂɘʠ.Normal[R],
									)
								}))
						})
					}))
			}),

			ʂɘʠ.Return[R](),
		),
	)

}

//	func Select[A, R any](it Iter[A], f Selector[A, R]) (_ Iter[R]) {
//		for a := range it {
//			Yield(f(a))
//		}
//		return
//	}
func Select[A, R any](it ʂɘʠ.Iterator[A], f Selector[A, R]) (_ ʂɘʠ.Iterator[R]) {
	return ʂɘʠ.Start[R](
		ʂɘʠ.Combine[R](
			ʂɘʠ.Delay[R](func() ʂɘʠ.Seq[R] {
				ɪʇ := it
				return ʂɘʠ.While[R](
					ɪʇ.MoveNext,
					ʂɘʠ.Delay[R](func() ʂɘʠ.Seq[R] {
						a := ɪʇ.Current()
						return ʂɘʠ.Bind[R](f(a),
							ʂɘʠ.Normal[R],
						)
					}))
			}),

			ʂɘʠ.Return[R](),
		),
	)

}

//	func Where[A any](it Iter[A], p Predicate[A]) (_ Iter[A]) {
//		for a := range it {
//			if p(a) {
//				Yield(a)
//			}
//		}
//		return
//	}
func Where[A any](it ʂɘʠ.Iterator[A], p Predicate[A]) (_ ʂɘʠ.Iterator[A]) {
	return ʂɘʠ.Start[A](
		ʂɘʠ.Combine[A](
			ʂɘʠ.Delay[A](func() ʂɘʠ.Seq[A] {
				ɪʇ := it
				return ʂɘʠ.While[A](
					ɪʇ.MoveNext,
					ʂɘʠ.Delay[A](func() ʂɘʠ.Seq[A] {
						a := ɪʇ.Current()
						if p(a) {
							return ʂɘʠ.Bind[A](a,
								ʂɘʠ.Normal[A],
							)
						}
						return ʂɘʠ.Normal[A]()
					}))
			}),

			ʂɘʠ.Return[A](),
		),
	)

}

func First[A any](it ʂɘʠ.Iterator[A]) (a A, has bool) {
	if it.MoveNext() {
		return it.Current(), true
	}
	return
}

func FirstWhile[A any](it ʂɘʠ.Iterator[A], p Predicate[A]) (fst A, has bool) {
	for ɪʇ := it; ɪʇ.MoveNext(); {
		a := ɪʇ.Current()
		if p(a) {
			return a, true
		}
	}

	return
}

func Last[A any](it ʂɘʠ.Iterator[A]) (last A, has bool) {
	for ɪʇ := it; ɪʇ.MoveNext(); {
		a := ɪʇ.Current()
		last = a
		has = true
	}

	return
}

func LastWhile[A any](it ʂɘʠ.Iterator[A], p Predicate[A]) (last A, has bool) {
	for ɪʇ := it; ɪʇ.MoveNext(); {
		a := ɪʇ.Current()
		if p(a) {
			last = a
			has = true
		}
	}

	return
}

//	func Take[A any](it Iter[A], cnt int) (_ Iter[A]) {
//		for a := range it {
//			if cnt <= 0 {
//				break
//			}
//			cnt--
//			Yield(a)
//		}
//		return
//	}
func Take[A any](it ʂɘʠ.Iterator[A], cnt int) (_ ʂɘʠ.Iterator[A]) {
	return ʂɘʠ.Start[A](
		ʂɘʠ.Combine[A](
			ʂɘʠ.Delay[A](func() ʂɘʠ.Seq[A] {
				ɪʇ := it
				return ʂɘʠ.While[A](
					ɪʇ.MoveNext,
					ʂɘʠ.Delay[A](func() ʂɘʠ.Seq[A] {
						a := ɪʇ.Current()
						if cnt <= 0 {
							return ʂɘʠ.Break[A]()

						}
						cnt--
						return ʂɘʠ.Bind[A](a,
							ʂɘʠ.Normal[A],
						)
					}))
			}),

			ʂɘʠ.Return[A](),
		),
	)

}

func TakeWhile[A any](it ʂɘʠ.Iterator[A], p Predicate[A]) (_ ʂɘʠ.Iterator[A]) {
	return Where(it, p)
}

//	func Skip[A any](it Iter[A], cnt int) (_ Iter[A]) {
//		for a := range it {
//			if cnt > 0 {
//				cnt--
//				continue
//			}
//			Yield(a)
//		}
//		return
//	}
func Skip[A any](it ʂɘʠ.Iterator[A], cnt int) (_ ʂɘʠ.Iterator[A]) {
	return ʂɘʠ.Start[A](
		ʂɘʠ.Combine[A](
			ʂɘʠ.Delay[A](func() ʂɘʠ.Seq[A] {
				ɪʇ := it
				return ʂɘʠ.While[A](
					ɪʇ.MoveNext,
					ʂɘʠ.Delay[A](func() ʂɘʠ.Seq[A] {
						a := ɪʇ.Current()
						if cnt > 0 {
							cnt--
							return ʂɘʠ.Continue[A]()

						}
						return ʂɘʠ.Bind[A](a,
							ʂɘʠ.Normal[A],
						)
					}))
			}),

			ʂɘʠ.Return[A](),
		),
	)

}

//	func SkipWhile[A any](it Iter[A], p Predicate[A]) (_ Iter[A]) {
//		for a := range it {
//			if p(a) {
//				continue
//			}
//			Yield(a)
//		}
//		return
//	}
func SkipWhile[A any](it ʂɘʠ.Iterator[A], p Predicate[A]) (_ ʂɘʠ.Iterator[A]) {
	return ʂɘʠ.Start[A](
		ʂɘʠ.Combine[A](
			ʂɘʠ.Delay[A](func() ʂɘʠ.Seq[A] {
				ɪʇ := it
				return ʂɘʠ.While[A](
					ɪʇ.MoveNext,
					ʂɘʠ.Delay[A](func() ʂɘʠ.Seq[A] {
						a := ɪʇ.Current()
						if p(a) {
							return ʂɘʠ.Continue[A]()

						}
						return ʂɘʠ.Bind[A](a,
							ʂɘʠ.Normal[A],
						)
					}))
			}),

			ʂɘʠ.Return[A](),
		),
	)

}

func Aggregate[A, B, R any](
	it ʂɘʠ.Iterator[A],
	init B,
	f func(acc B, cur A) B,
	selector Selector[B, R],
) (r R) {
	acc := init
	for ɪʇ := it; ɪʇ.MoveNext(); {
		a := ɪʇ.Current()
		acc = f(acc, a)
	}

	return selector(acc)
}

func Fold[A, R any](
	it ʂɘʠ.Iterator[A],
	init R,
	f func(acc R, cur A) R,
) (acc R) {
	acc = init
	for ɪʇ := it; ɪʇ.MoveNext(); {
		a := ɪʇ.Current()
		acc = f(acc, a)
	}

	return
}

func Reduce[A any](
	it ʂɘʠ.Iterator[A],
	f func(acc A, cur A) A,
) (acc A, ok bool) {
	if !it.MoveNext() {
		return
	}
	acc = it.Current()
	for ɪʇ := it; ɪʇ.MoveNext(); {
		a := ɪʇ.Current()
		acc = f(acc, a)
		ok = true
	}

	return
}

func All[A any](it ʂɘʠ.Iterator[A], p Predicate[A]) bool {
	for ɪʇ := it; ɪʇ.MoveNext(); {
		a := ɪʇ.Current()
		if !p(a) {
			return false
		}
	}

	return true
}

func AnyElem[A any](it ʂɘʠ.Iterator[A]) bool {
	return it.MoveNext()
}

func Any[A any](it ʂɘʠ.Iterator[A], p Predicate[A]) bool {
	for ɪʇ := it; ɪʇ.MoveNext(); {
		a := ɪʇ.Current()
		if p(a) {
			return true
		}
	}

	return false
}

//	func Append[A any](it Iter[A], a A) (_ Iter[A]) {
//		YieldFrom(it)
//		Yield(a)
//		return
//	}
func Append[A any](it ʂɘʠ.Iterator[A], a A) (_ ʂɘʠ.Iterator[A]) {
	return ʂɘʠ.Start[A](
		ʂɘʠ.Combine[A](
			ʂɘʠ.Delay[A](func() ʂɘʠ.Seq[A] {
				ɪʇ := it
				return ʂɘʠ.While[A](
					ɪʇ.MoveNext,
					ʂɘʠ.Delay[A](func() ʂɘʠ.Seq[A] {
						ʌ := ɪʇ.Current()
						return ʂɘʠ.Bind[A](ʌ,
							ʂɘʠ.Normal[A],
						)
					}))
			}),
			ʂɘʠ.Delay[A](func() ʂɘʠ.Seq[A] {
				return ʂɘʠ.Bind[A](a,
					ʂɘʠ.Return[A],
				)
			})),
	)

}
