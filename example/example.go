//go:build !co

// Code generated by github.com/goghcrow/go-co DO NOT EDIT.
package example

import (
	"bufio"
	ʂɘʠ "github.com/goghcrow/go-co/seq"
	"io"
	"os"
	"strings"
)

//	func SampleGetNumList() (_ Iter[int]) {
//		Yield(1)
//		Yield(2)
//		Yield(3)
//		return
//	}
func SampleGetNumList() (_ ʂɘʠ.Iterator[int]) {
	return ʂɘʠ.Start[int](
		ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Bind[int](2, func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Bind[int](3,
					ʂɘʠ.Return[int],
				)
			})
		}),
	)

}

//	func SampleYieldFrom() (_ Iter[int]) {
//		Yield(0)
//		YieldFrom(SampleGetNumList())
//		Yield(4)
//		return
//	}
func SampleYieldFrom() (_ ʂɘʠ.Iterator[int]) {
	return ʂɘʠ.Start[int](
		ʂɘʠ.Bind[int](0, func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Combine[int](
				ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					ɪʇ := SampleGetNumList()
					return ʂɘʠ.While[int](
						ɪʇ.MoveNext,
						ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
							ʌ := ɪʇ.Current()
							return ʂɘʠ.Bind[int](ʌ,
								ʂɘʠ.Normal[int],
							)
						}))
				}),

				ʂɘʠ.Bind[int](4,
					ʂɘʠ.Return[int],
				),
			)
		}),
	)

}

type Pair[K, V any] struct {
	Key K
	Val V
}

//	func SampleLoop() (_ Iter[any]) {
//		for i := 0; i < 5; i++ {
//			Yield(i)
//		}
//
//		xs := []string{"a", "b", "c"}
//		for i, n := range xs {
//			Yield(Pair[int, string]{i, n})
//		}
//
//		for i, c := range "Hello World!" {
//			Yield(Pair[int, rune]{i, c})
//		}
//		return
//	}
func SampleLoop() (_ ʂɘʠ.Iterator[any]) {
	return ʂɘʠ.Start[any](
		ʂɘʠ.Combine[any](
			ʂɘʠ.Delay[any](func() ʂɘʠ.Seq[any] {
				i := 0
				return ʂɘʠ.For[any](func() bool {
					return i < 5
				}, func() {
					i++
				}, ʂɘʠ.Delay[any](func() ʂɘʠ.Seq[any] {
					return ʂɘʠ.Bind[any](i,
						ʂɘʠ.Normal[any],
					)
				}))
			}),
			ʂɘʠ.Delay[any](func() ʂɘʠ.Seq[any] {

				xs := []string{"a", "b", "c"}
				ɪʇ1 := ʂɘʠ.NewSliceIter(xs)
				return ʂɘʠ.Combine[any](
					ʂɘʠ.While[any](
						ɪʇ1.MoveNext,
						ʂɘʠ.Delay[any](func() ʂɘʠ.Seq[any] {

							i, n := ɪʇ1.Current().Key, ɪʇ1.Current().Val
							return ʂɘʠ.Delay[any](func() ʂɘʠ.Seq[any] {
								return ʂɘʠ.Bind[any](Pair[int, string]{i, n},
									ʂɘʠ.Normal[any],
								)
							})
						})),
					ʂɘʠ.Delay[any](func() ʂɘʠ.Seq[any] {
						ɪʇ2 := ʂɘʠ.NewStringIter("Hello World!")
						return ʂɘʠ.Combine[any](
							ʂɘʠ.While[any](
								ɪʇ2.MoveNext,
								ʂɘʠ.Delay[any](func() ʂɘʠ.Seq[any] {

									i, c := ɪʇ2.Current().Key, ɪʇ2.Current().Val
									return ʂɘʠ.Delay[any](func() ʂɘʠ.Seq[any] {
										return ʂɘʠ.Bind[any](Pair[int, rune]{i, c},
											ʂɘʠ.Normal[any],
										)
									})
								})),

							ʂɘʠ.Return[any](),
						)
					}))
			})),
	)

}

//	func SampleLoopMap() (_ Iter[Pair[string, int]]) {
//		m := map[string]int{"a": 1, "b": 2, "c": 3}
//		for k, v := range m {
//			Yield(Pair[string, int]{k, v})
//		}
//		return
//	}
func SampleLoopMap() (_ ʂɘʠ.Iterator[Pair[string, int]]) {
	return ʂɘʠ.Start[Pair[string, int]](ʂɘʠ.Delay[Pair[string, int]](func() ʂɘʠ.Seq[Pair[string, int]] {
		m := map[string]int{"a": 1, "b": 2, "c": 3}
		ɪʇ3 := ʂɘʠ.NewMapIter(m)
		return ʂɘʠ.Combine[Pair[string, int]](
			ʂɘʠ.While[Pair[string, int]](
				ɪʇ3.MoveNext,
				ʂɘʠ.Delay[Pair[string, int]](func() ʂɘʠ.Seq[Pair[string, int]] {

					k, v := ɪʇ3.Current().Key, ɪʇ3.Current().Val
					return ʂɘʠ.Delay[Pair[string, int]](func() ʂɘʠ.Seq[Pair[string, int]] {
						return ʂɘʠ.Bind[Pair[string, int]](Pair[string, int]{k, v},
							ʂɘʠ.Normal[Pair[string, int]],
						)
					})
				})),

			ʂɘʠ.Return[Pair[string, int]](),
		)
	}))

}

//	func SampleGetEvenNumbers(start, end int) (_ Iter[int]) {
//		for i := start; i < end; i++ {
//			if i%2 == 0 {
//				Yield(i)
//			}
//		}
//		return
//	}
func SampleGetEvenNumbers(start, end int) (_ ʂɘʠ.Iterator[int]) {
	return ʂɘʠ.Start[int](
		ʂɘʠ.Combine[int](
			ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				i := start
				return ʂɘʠ.For[int](func() bool {
					return i < end
				}, func() {
					i++
				}, ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					if i%2 == 0 {
						return ʂɘʠ.Bind[int](i,
							ʂɘʠ.Normal[int],
						)
					}
					return ʂɘʠ.Normal[int]()
				}))
			}),

			ʂɘʠ.Return[int](),
		),
	)

}

//	func PowersOfTwo(exponent int) (_ Iter[int]) {
//		for r, i := 1, 0; i < exponent; i++ {
//			Yield(r)
//			r *= 2
//		}
//		return
//	}
func PowersOfTwo(exponent int) (_ ʂɘʠ.Iterator[int]) {
	return ʂɘʠ.Start[int](
		ʂɘʠ.Combine[int](
			ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				r, i := 1, 0
				return ʂɘʠ.For[int](func() bool {
					return i < exponent
				}, func() {
					i++
				}, ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Bind[int](r, func() ʂɘʠ.Seq[int] {

						r *= 2
						return ʂɘʠ.Normal[int]()
					})
				}))
			}),

			ʂɘʠ.Return[int](),
		),
	)

}

//	func Fibonacci() Iter[int] {
//		a, b := 1, 1
//		for {
//			Yield(b)
//			a, b = b, a+b
//		}
//	}
func Fibonacci() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		a, b := 1, 1
		return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Bind[int](b, func() ʂɘʠ.Seq[int] {

				a, b = b, a+b
				return ʂɘʠ.Normal[int]()
			})
		}))
	}))

}

//	func Range(start, end, step int) (_ Iter[int]) {
//		for i := start; i < end; i += step {
//			Yield(i)
//		}
//		return
//	}
func Range(start, end, step int) (_ ʂɘʠ.Iterator[int]) {
	return ʂɘʠ.Start[int](
		ʂɘʠ.Combine[int](
			ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				i := start
				return ʂɘʠ.For[int](func() bool {
					return i < end
				}, func() {
					i += step
				}, ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Bind[int](i,
						ʂɘʠ.Normal[int],
					)
				}))
			}),

			ʂɘʠ.Return[int](),
		),
	)

}

//	func Grep(s string, lines []string) (_ Iter[string]) {
//		for _, line := range lines {
//			if strings.Contains(line, s) {
//				Yield(line)
//			}
//		}
//		return
//	}
func Grep(s string, lines []string) (_ ʂɘʠ.Iterator[string]) {
	return ʂɘʠ.Start[string](ʂɘʠ.Delay[string](func() ʂɘʠ.Seq[string] {
		ɪʇ4 := ʂɘʠ.NewSliceIter(lines)
		return ʂɘʠ.Combine[string](
			ʂɘʠ.While[string](
				ɪʇ4.MoveNext,
				ʂɘʠ.Delay[string](func() ʂɘʠ.Seq[string] {
					line := ɪʇ4.Current().Val
					return ʂɘʠ.Delay[string](func() ʂɘʠ.Seq[string] {
						if strings.Contains(line, s) {
							return ʂɘʠ.Bind[string](line,
								ʂɘʠ.Normal[string],
							)
						}
						return ʂɘʠ.Normal[string]()
					})
				})),

			ʂɘʠ.Return[string](),
		)
	}))

}

func Run() {
	for ɪʇ := SampleGetNumList(); ɪʇ.MoveNext(); {
		n := ɪʇ.Current()
		println(n)
	}
	for ɪʇ := SampleYieldFrom(); ɪʇ.MoveNext(); {
		n := ɪʇ.Current()
		println(n)
	}
	for ɪʇ := Fibonacci(); ɪʇ.MoveNext(); {
		n := ɪʇ.Current()
		if n > 1000 {
			println(n)
			break
		}
	}
	for ɪʇ := Range(0, 100, 2); ɪʇ.MoveNext(); {
		i := ɪʇ.Current()
		println(i)
	}

	iter := Range(0, 100, 2)
	for iter.MoveNext() {
		println(iter.Current())
	}
}

type Line struct {
	Bytes  []byte
	Prefix bool
	Err    error
}

//	func ReadFile(name string) (_ Iter[Line]) {
//		file, err := os.Open(name)
//
//		if err != nil {
//			Yield(Line{Err: err})
//			return
//		}
//
//		r := bufio.NewReader(file)
//		for {
//			line, prefix, err := r.ReadLine()
//			if err == io.EOF {
//				break
//			} else if err != nil {
//				Yield(Line{Err: err})
//			} else {
//				Yield(Line{Bytes: line, Prefix: prefix, Err: err})
//			}
//		}
//		return
//	}
func ReadFile(name string) (_ ʂɘʠ.Iterator[Line]) {
	return ʂɘʠ.Start[Line](ʂɘʠ.Delay[Line](func() ʂɘʠ.Seq[Line] {
		file, err := os.Open(name)
		return ʂɘʠ.Combine[Line](ʂɘʠ.Delay[Line](func() ʂɘʠ.Seq[Line] {
			if err != nil {
				return ʂɘʠ.Bind[Line](Line{Err: err},
					ʂɘʠ.Return[Line],
				)
			}
			return ʂɘʠ.Normal[Line]()
		}), ʂɘʠ.Delay[Line](func() ʂɘʠ.Seq[Line] {

			r := bufio.NewReader(file)
			return ʂɘʠ.Combine[Line](
				ʂɘʠ.Loop[Line](ʂɘʠ.Delay[Line](func() ʂɘʠ.Seq[Line] {

					line, prefix, err := r.ReadLine()
					if err == io.EOF {
						return ʂɘʠ.Break[Line]()
					} else if err != nil {
						return ʂɘʠ.Bind[Line](Line{Err: err},
							ʂɘʠ.Normal[Line],
						)
					} else {
						return ʂɘʠ.Bind[Line](Line{Bytes: line, Prefix: prefix, Err: err},
							ʂɘʠ.Normal[Line],
						)
					}
				})),

				ʂɘʠ.Return[Line](),
			)
		}))
	}))

}
