//go:build !co

// Code generated by github.com/goghcrow/go-co DO NOT EDIT.
package sched

import (
	ʂɘʠ "github.com/goghcrow/go-co/seq"
	"testing"
	"time"
)

func timeAfter(d time.Duration, cb func()) {
	go func() {
		time.Sleep(d)
		cb()
	}()
}

func Sleep(d time.Duration) Async {
	return func(cont Continuation) {
		timeAfter(d, func() {
			cont(nil, nil)
		})
	}
}

func SampleAsyncTask(v any) Async {
	return func(cont Continuation) {
		timeAfter(time.Second*1, func() {
			cont(v, nil)
		})
	}
}

func TestCo(t *testing.T) {
	defer DeferMain()

	now := func() string { return time.Now().Format("2006-01-02 15:04:05") }

	Co( // func(s *Sched) (_ Iter[Async]) {
		// 	t.Log("start")
		//
		// 	t.Log(now() + " before sleep")
		// 	Yield(Sleep(time.Second * 1))
		//
		// 	t.Log(now() + " before async task")
		// 	Yield(SampleAsyncTask(42))
		//
		// 	t.Log(now() + " after async task and get result")
		// 	result, _ := s.GetReceive()
		// 	t.Log(result)
		//
		// 	t.Log("end")
		// 	return
		// }
		func(s *Sched) (_ ʂɘʠ.Iterator[Async]) {
			return ʂɘʠ.Start[Async](ʂɘʠ.Delay[Async](func() ʂɘʠ.Seq[Async] {
				t.Log("start")

				t.Log(now() + " before sleep")
				return ʂɘʠ.Bind[Async](Sleep(time.Second*1), func() ʂɘʠ.Seq[Async] {

					t.Log(now() + " before async task")
					return ʂɘʠ.Bind[Async](SampleAsyncTask(42), func() ʂɘʠ.Seq[Async] {

						t.Log(now() + " after async task and get result")
						result, _ := s.GetReceive()
						t.Log(result)

						t.Log("end")
						return ʂɘʠ.Return[Async]()
					})
				})
			}))

		})
}
