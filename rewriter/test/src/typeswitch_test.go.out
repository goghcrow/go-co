//go:build !co

// Code generated by github.com/goghcrow/go-co DO NOT EDIT.
package src

import (
	ʂɘʠ "github.com/goghcrow/go-co/seq"
	"testing"
)

func TestTypeSwitchTrival(t *testing.T) {
	f := func() {}
	g := func() (_ ʂɘʠ.Iterator[int]) {
		return ʂɘʠ.Start[int](
			ʂɘʠ.Bind[int](0, func() ʂɘʠ.Seq[int] {

				var a any
				return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					switch a.(type) {
					case int:
						return ʂɘʠ.Bind[int](1,
							ʂɘʠ.Normal[int],
						)
					case string:
						return ʂɘʠ.Bind[int](2,
							ʂɘʠ.Normal[int],
						)
					default:

						f()
						return ʂɘʠ.Bind[int](3, func() ʂɘʠ.Seq[int] {

							f()
							return ʂɘʠ.Normal[int]()
						})
					}
				}),
					ʂɘʠ.Bind[int](4, func() ʂɘʠ.Seq[int] {

						f()
						return ʂɘʠ.Return[int]()
					}),
				)
			}),
		)

	}
	xs := iter2slice(g())
	assertEqual(t, xs, []int{0, 3, 4})
}

func TestTypeSwitchTrivalInitAndNotDefaultBranch(t *testing.T) {
	g := func(a any) (_ ʂɘʠ.Iterator[int]) {
		return ʂɘʠ.Start[int](
			ʂɘʠ.Bind[int](0, func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Combine[int](
					ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

						x := a
						switch x.(type) {
						case int:
							return ʂɘʠ.Bind[int](1,
								ʂɘʠ.Normal[int],
							)
						case string:
							return ʂɘʠ.Bind[int](2,
								ʂɘʠ.Normal[int],
							)
						default:
							return ʂɘʠ.Bind[int](3,
								ʂɘʠ.Normal[int],
							)
						}
					}),

					ʂɘʠ.Bind[int](4,
						ʂɘʠ.Return[int],
					),
				)
			}),
		)

	}

	{
		xs := iter2slice(g(1))
		assertEqual(t, xs, []int{0, 1, 4})
	}
	{
		xs := iter2slice(g(""))
		assertEqual(t, xs, []int{0, 2, 4})
	}
	{
		xs := iter2slice(g(3.13))
		assertEqual(t, xs, []int{0, 3, 4})
	}
}

func TestTypeSwitchScope(t *testing.T) {
	g := func(a any) (_ ʂɘʠ.Iterator[int]) {
		return ʂɘʠ.Start[int](
			ʂɘʠ.Bind[int](0, func() ʂɘʠ.Seq[int] {

				x := 42
				return ʂɘʠ.Combine[int](
					ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

						x := a
						switch x.(type) {
						case int:
							return ʂɘʠ.Bind[int](1,
								ʂɘʠ.Normal[int],
							)
						case string:
							return ʂɘʠ.Bind[int](2,
								ʂɘʠ.Normal[int],
							)
						default:
							return ʂɘʠ.Bind[int](3,
								ʂɘʠ.Normal[int],
							)
						}
					}),
					ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Bind[int](x,
							ʂɘʠ.Return[int],
						)
					}))
			}),
		)

	}

	{
		xs := iter2slice(g(1))
		assertEqual(t, xs, []int{0, 1, 42})
	}
	{
		xs := iter2slice(g(""))
		assertEqual(t, xs, []int{0, 2, 42})
	}
	{
		xs := iter2slice(g(3.13))
		assertEqual(t, xs, []int{0, 3, 42})
	}
}

func TestTypeSwitchYieldInitAndNotDefaultBranch(t *testing.T) {
	g := func() (_ ʂɘʠ.Iterator[int]) {
		return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			var a any
			return ʂɘʠ.Bind[int](0, func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					switch a.(type) {
					case int:
						return ʂɘʠ.Bind[int](1,
							ʂɘʠ.Normal[int],
						)
					case string:
						return ʂɘʠ.Bind[int](2,
							ʂɘʠ.Normal[int],
						)
					}
					return ʂɘʠ.Normal[int]()
				}),
					ʂɘʠ.Bind[int](3,
						ʂɘʠ.Return[int],
					),
				)
			})
		}))

	}
	xs := iter2slice(g())
	assertEqual(t, xs, []int{0, 3})
}

func TestTypeSwitchYieldInitAndNotDefaultBranch1(t *testing.T) {
	g := func() (_ ʂɘʠ.Iterator[int]) {
		return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			var a any = "hello"
			return ʂɘʠ.Bind[int](0, func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					switch a.(type) {
					case int:
						return ʂɘʠ.Bind[int](1,
							ʂɘʠ.Normal[int],
						)
					case string:
						return ʂɘʠ.Bind[int](2,
							ʂɘʠ.Normal[int],
						)
					}
					return ʂɘʠ.Normal[int]()
				}),
					ʂɘʠ.Bind[int](3,
						ʂɘʠ.Return[int],
					),
				)
			})
		}))

	}
	xs := iter2slice(g())
	assertEqual(t, xs, []int{0, 2, 3})
}

func TestTypeSwitchYieldInitAndNotDefaultBranch2(t *testing.T) {
	g := func() (_ ʂɘʠ.Iterator[int]) {
		return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			var a any = "hello"
			return ʂɘʠ.Bind[int](0, func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					switch a.(type) {
					case int:
						return ʂɘʠ.Bind[int](1,
							ʂɘʠ.Normal[int],
						)
					case string:
						return ʂɘʠ.Bind[int](2,
							ʂɘʠ.Return[int],
						)
					}
					return ʂɘʠ.Normal[int]()
				}),
					ʂɘʠ.Bind[int](3,
						ʂɘʠ.Return[int],
					),
				)
			})
		}))

	}
	xs := iter2slice(g())
	assertEqual(t, xs, []int{0, 2})
}

func TestTypeSwitchYieldInitAndAssign(t *testing.T) {
	g := func() (_ ʂɘʠ.Iterator[int]) {
		return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			var a any = 42
			return ʂɘʠ.Bind[int](0, func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					switch b := a.(type) {
					case int:
						return ʂɘʠ.Bind[int](b,
							ʂɘʠ.Return[int],
						)
					case string:
						return ʂɘʠ.Bind[int](2,
							ʂɘʠ.Normal[int],
						)
					}
					return ʂɘʠ.Normal[int]()
				}),
					ʂɘʠ.Bind[int](3,
						ʂɘʠ.Return[int],
					),
				)
			})
		}))

	}
	xs := iter2slice(g())
	assertEqual(t, xs, []int{0, 42})
}
