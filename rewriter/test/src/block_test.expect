// Code generated by github.com/goghcrow/go-co DO NOT EDIT.
package src

import (
	"testing"

	. "github.com/goghcrow/go-co"
	ʂɘʠ "github.com/goghcrow/go-co/seq"
)

func TestBlockStmt(t *testing.T) {
	g := func() ʂɘʠ.Iterator[int] {
		return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Normal[int]()
					})
				})
			}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Bind[int](2, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Return[int]()
				})
			}))
		}))

	}
	xs := iter2slice(g())
	assertEqual(t, xs, []int{1, 2})
}

func TestTrivalBlock(t *testing.T) {
	g := func() ʂɘʠ.Iterator[int] {
		return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			for {
				{
					if true {
						break
					} else {
						continue
					}
				}
			}
			return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Return[int]()
			})
		}))

	}
	xs := iter2slice(g())
	assertEqual(t, xs, []int{1})
}

func TestYieldBlock(t *testing.T) {
	g := func() ʂɘʠ.Iterator[int] {
		return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					i := 0
					return ʂɘʠ.For[int](func() bool {
						return i < 5
					}, func() {
						i++
					}, ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
							if true {
								return ʂɘʠ.Bind[int](i, func() ʂɘʠ.Seq[int] {
									return ʂɘʠ.Normal[int]()
								})
							} else {
								return ʂɘʠ.Break[int]()
							}
							return ʂɘʠ.Normal[int]()
						})
					}))
				})
			}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Return[int]()
			}))
		}))

	}
	xs := iter2slice(g())
	assertEqual(t, xs, []int{0, 1, 2, 3, 4})
}

func TestYieldBlock2(t *testing.T) {
	f := func() {}
	g := func() ʂɘʠ.Iterator[int] {
		return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					i := 0
					return ʂɘʠ.For[int](func() bool {
						return i < 5
					}, func() {
						i++
					}, ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
							return ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
								if true {
									return ʂɘʠ.Bind[int](i, func() ʂɘʠ.Seq[int] {
										return ʂɘʠ.Normal[int]()
									})
								} else {
									return ʂɘʠ.Break[int]()
								}
								return ʂɘʠ.Normal[int]()
							})
						}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
							return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {

								f()
								return ʂɘʠ.Normal[int]()
							})
						}))
					}))
				})
			}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Return[int]()
			}))
		}))

	}
	xs := iter2slice(g())
	assertEqual(t, xs, []int{0, 1, 1, 1, 2, 1, 3, 1, 4, 1})
}
