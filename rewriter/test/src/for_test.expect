// Code generated by github.com/goghcrow/go-co DO NOT EDIT.
package src

import (
	"testing"

	. "github.com/goghcrow/go-co"
	ʂɘʠ "github.com/goghcrow/go-co/seq"
)

func TestForPostScope(t *testing.T) {
	g := func() ʂɘʠ.Iterator[int] {
		return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			a := 42
			return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

					cnt := 5
					return ʂɘʠ.While[int](func() bool {
						return cnt > 0
					}, ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

							a := 100
							return ʂɘʠ.Bind[int](a, func() ʂɘʠ.Seq[int] {

								a++
								return ʂɘʠ.Normal[int]()
							})
						}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
							return ʂɘʠ.Bind[int](func() int {
								cnt--
								a++
								return a - 1
							}(), func() ʂɘʠ.Seq[int] {
								return ʂɘʠ.Normal[int]()
							})
						}))
					}))
				})
			}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Return[int]()
			}))
		}))

	}

	xs := iter2slice(g())
	assertEqual(t, xs, []int{100, 42, 100, 43, 100, 44, 100, 45, 100, 46})
}

func TestForBodyScope(t *testing.T) {
	g := func() ʂɘʠ.Iterator[int] {
		return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					i := 0
					return ʂɘʠ.For[int](func() bool {
						return i < 5
					}, func() {
						i++
					}, ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

						i := 0
						return ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
							if true {
								return ʂɘʠ.Bind[int](i, func() ʂɘʠ.Seq[int] {
									return ʂɘʠ.Normal[int]()
								})
							} else {
								return ʂɘʠ.Break[int]()
							}
							return ʂɘʠ.Normal[int]()
						})
					}))
				})
			}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Return[int]()
			}))
		}))

	}
	xs := iter2slice(g())
	assertEqual(t, xs, []int{0, 0, 0, 0, 0})
}

func TestForBodyScope1(t *testing.T) {
	g := func() ʂɘʠ.Iterator[int] {
		return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					i := 0
					return ʂɘʠ.For[int](func() bool {
						return i < 5
					}, func() {
						i++
					}, ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

							i := 0
							if true {
								return ʂɘʠ.Bind[int](i, func() ʂɘʠ.Seq[int] {
									return ʂɘʠ.Normal[int]()
								})
							} else {
								return ʂɘʠ.Break[int]()
							}
							return ʂɘʠ.Normal[int]()
						})
					}))
				})
			}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Return[int]()
			}))
		}))

	}
	xs := iter2slice(g())
	assertEqual(t, xs, []int{0, 0, 0, 0, 0})
}

func TestFor(t *testing.T) {
	{
		g := func() ʂɘʠ.Iterator[int] {
			return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				i := 0
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.While[int](func() bool {
							return i < 3
						}, ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
							return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
								return ʂɘʠ.Bind[int](3, func() ʂɘʠ.Seq[int] {

									i++
									return ʂɘʠ.Normal[int]()
								})
							}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
								return ʂɘʠ.Bind[int](2, func() ʂɘʠ.Seq[int] {
									return ʂɘʠ.Normal[int]()
								})
							}))
						}))
					}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Return[int]()
					}))
				})
			}))

		}
		xs := iter2slice(g())
		assertEqual(t, xs, []int{1, 3, 2, 3, 2, 3, 2})
	}

	{
		g := func() ʂɘʠ.Iterator[int] {
			return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				i := 0
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.While[int](func() bool {
							return i < 3
						}, ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
							return ʂɘʠ.Bind[int](3, func() ʂɘʠ.Seq[int] {

								i++
								return ʂɘʠ.Bind[int](2, func() ʂɘʠ.Seq[int] {
									return ʂɘʠ.Normal[int]()
								})
							})
						}))
					}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Return[int]()
					}))
				})
			}))

		}
		xs := iter2slice(g())
		assertEqual(t, xs, []int{1, 3, 2, 3, 2, 3, 2})
	}

	{
		g := func() ʂɘʠ.Iterator[int] {
			return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					for false {
					}
					return ʂɘʠ.Return[int]()
				})
			}))

		}
		xs := iter2slice(g())
		assertEqual(t, xs, []int{1})
	}

	{
		g := func() ʂɘʠ.Iterator[int] {
			return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				flag := true
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					for flag {
						flag = false
					}
					return ʂɘʠ.Bind[int](2, func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Return[int]()
					})
				})
			}))

		}
		xs := iter2slice(g())
		assertEqual(t, xs, []int{1, 2})
	}

	{
		g := func() ʂɘʠ.Iterator[int] {
			return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				flag := true
				return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.While[int](func() bool {
						return flag
					}, ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

						flag = false
						return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
							return ʂɘʠ.Normal[int]()
						})
					}))
				}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Bind[int](2, func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Return[int]()
					})
				}))
			}))

		}
		xs := iter2slice(g())
		assertEqual(t, xs, []int{1, 2})
	}

	{
		g := func() ʂɘʠ.Iterator[int] {
			return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				i := 0
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.While[int](func() bool {
							return i < 3
						}, ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
							return ʂɘʠ.Bind[int](3, func() ʂɘʠ.Seq[int] {

								i++
								return ʂɘʠ.Bind[int](2, func() ʂɘʠ.Seq[int] {
									return ʂɘʠ.Normal[int]()
								})
							})
						}))
					}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Return[int]()
					}))
				})
			}))

		}
		xs := iter2slice(g())
		assertEqual(t, xs, []int{1, 3, 2, 3, 2, 3, 2})
	}

	{
		g := func() ʂɘʠ.Iterator[int] {
			return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				i := 0
				return ʂɘʠ.Bind[int](0, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.While[int](func() bool {
							return i < 3
						}, ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
							return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

								i++
								return ʂɘʠ.Bind[int](42, func() ʂɘʠ.Seq[int] {
									return ʂɘʠ.Normal[int]()
								})
							}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
								return ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
									ɪʇ := func() ʂɘʠ.Iterator[int] {
										return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
											return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
												return ʂɘʠ.Bind[int](2, func() ʂɘʠ.Seq[int] {
													return ʂɘʠ.Return[int]()
												})
											})
										}))

									}()
									return ʂɘʠ.While[int](func() bool {
										return ɪʇ.MoveNext()
									}, ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
										ʌ := ɪʇ.Current()
										return ʂɘʠ.Bind[int](ʌ, func() ʂɘʠ.Seq[int] {
											return ʂɘʠ.Normal[int]()
										})
									}))
								})
							}))
						}))
					}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Return[int]()
					}))
				})
			}))

		}
		xs := iter2slice(g())
		assertEqual(t, xs, []int{0, 42, 1, 2, 42, 1, 2, 42, 1, 2})
	}

	{
		var xs []int
		f := func(g ʂɘʠ.Iterator[int]) {
			{
				ɪʇ := g
				for ɪʇ.MoveNext() {
					i := ɪʇ.Current()
					xs = append(xs, i)
				}
			}

		}

		g := func() ʂɘʠ.Iterator[int] {
			return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				flag := true
				for ; flag; f(func() ʂɘʠ.Iterator[int] {
					return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
							return ʂɘʠ.Bind[int](2, func() ʂɘʠ.Seq[int] {
								return ʂɘʠ.Bind[int](3, func() ʂɘʠ.Seq[int] {
									return ʂɘʠ.Return[int]()
								})
							})
						})
					}))

				}()) {
					flag = false
				}
				return ʂɘʠ.Return[int]()
			}))

		}
		iter2slice(g())
		assertEqual(t, xs, []int{1, 2, 3})

	}
}

func TestReturnBug(t *testing.T) {
	g := func() ʂɘʠ.Iterator[int] {
		return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			i := 0
			for ; i < 10; i++ {
				if false {
					break
				}
			}
			return ʂɘʠ.Bind[int](i, func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Return[int]()
			})
		}))

	}
	xs := iter2slice(g())
	assertEqual(t, xs, []int{10})
}
