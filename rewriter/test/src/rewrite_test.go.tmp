//go:build !co
// +build !co

// Code generated by github.com/goghcrow/go-co DO NOT EDIT.
package src

import (
	. "github.com/goghcrow/go-co"
	ʂɘʠ "github.com/goghcrow/go-co/seq"
)

func yield1() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		})
	}))

}

func returnNilInFuncLit() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		f := func() any {
			return nil
		}
		f()
		return ʂɘʠ.Bind[int](0, func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		})
	}))

}

func ifYield1() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			if true {
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			}
			return ʂɘʠ.Normal[int]()
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func nestedForWith0() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			}))
		}))
	}))

}

func nestedForWith() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {

							println(1)
							return ʂɘʠ.Normal[int]()
						})
					}))
				}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

					println(2)
					return ʂɘʠ.Normal[int]()
				}))
			}))
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func nestedForIf() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					if true {
						return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {

							println(1)
							return ʂɘʠ.Normal[int]()
						})
					}
					return ʂɘʠ.Normal[int]()
				}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

					println(2)
					return ʂɘʠ.Normal[int]()
				}))
			}))
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func endlessForWithYield() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Normal[int]()
			})
		}))
	}))

}

func endlessForWithYield1() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			}))
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func endlessForWithYieldThenBreak() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Break[int]()
				})
			}))
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func endlessForWithYieldThenContinue() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Continue[int]()
			})
		}))
	}))

}

func endlessForWithYieldThenReturn() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Bind[int](0, func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Return[int]()
			})
		}))
	}))

}

func endlessForWithContinueBreakYield() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				if true {
					return ʂɘʠ.Continue[int]()
				} else if true {
					return ʂɘʠ.Break[int]()
				} else {
					return ʂɘʠ.Bind[int](0, func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Normal[int]()
					})
				}
			}))
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func endlessForWithYieldBreak() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				if false {
					return ʂɘʠ.Bind[int](0, func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Normal[int]()
					})
				} else {
					return ʂɘʠ.Break[int]()
				}
			}))
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func endlessForWithBreakYield() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				if false {
					return ʂɘʠ.Break[int]()
				} else {
					return ʂɘʠ.Bind[int](0, func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Normal[int]()
					})
				}
			}))
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func forWithContinueBreakYield() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				i := 0
				return ʂɘʠ.For[int](func() bool {
					return i < 10
				}, func() {
					i++
				}, ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					if i%2 == 0 {
						return ʂɘʠ.Continue[int]()
					} else if i > 6 {
						return ʂɘʠ.Break[int]()
					} else {
						return ʂɘʠ.Bind[int](i, func() ʂɘʠ.Seq[int] {
							return ʂɘʠ.Normal[int]()
						})
					}
				}))
			})
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func deadcode() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			}))
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
			return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			}))
		}))
	}))

}

func block0() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			})
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func block00() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Normal[int]()
					})
				})
			})
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func block011() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

				i := 1
				return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

						i := 2
						return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {

							println(i)
							return ʂɘʠ.Normal[int]()
						})
					})
				}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

					println(i)
					return ʂɘʠ.Normal[int]()
				}))
			}))
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func breakContinue() ʂɘʠ.Iterator[int] {
	for {
		func() ʂɘʠ.Iterator[int] {
			return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {

					func() {
						for {
							break
						}
					}()
					return ʂɘʠ.Return[int]()
				})
			}))

		}()
		continue
	}
	return nil
}
