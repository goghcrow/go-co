//go:build !co

// Code generated by github.com/goghcrow/go-co DO NOT EDIT.
package src

import (
	ʂɘʠ "github.com/goghcrow/go-co/seq"
	"testing"
)

func TestBlockStmt(t *testing.T) {
	g := func() ʂɘʠ.Iterator[int] {
		return ʂɘʠ.Start[int](
			ʂɘʠ.Combine[int](

				ʂɘʠ.Bind[int](1,
					ʂɘʠ.Normal[int],
				),

				ʂɘʠ.Bind[int](2,
					ʂɘʠ.Return[int],
				),
			),
		)

	}
	xs := iter2slice(g())
	assertEqual(t, xs, []int{1, 2})
}

func TestTrivalBlock(t *testing.T) {
	g := func() ʂɘʠ.Iterator[int] {
		return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			for {
				{
					if true {
						break
					} else {
						continue
					}
				}
			}
			return ʂɘʠ.Bind[int](1,
				ʂɘʠ.Return[int],
			)
		}))

	}
	xs := iter2slice(g())
	assertEqual(t, xs, []int{1})
}

func TestYieldBlock(t *testing.T) {
	g := func() ʂɘʠ.Iterator[int] {
		return ʂɘʠ.Start[int](
			ʂɘʠ.Combine[int](
				ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					i := 0
					return ʂɘʠ.For[int](func() bool {
						return i < 5
					}, func() {
						i++
					},
						ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
							if true {
								return ʂɘʠ.Bind[int](i,
									ʂɘʠ.Normal[int],
								)
							} else {
								return ʂɘʠ.Break[int]()
							}
						}),
					)
				}),

				ʂɘʠ.Return[int](),
			),
		)

	}
	xs := iter2slice(g())
	assertEqual(t, xs, []int{0, 1, 2, 3, 4})
}

func TestYieldBlock2(t *testing.T) {
	f := func() {}
	g := func() ʂɘʠ.Iterator[int] {
		return ʂɘʠ.Start[int](
			ʂɘʠ.Combine[int](
				ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					i := 0
					return ʂɘʠ.For[int](func() bool {
						return i < 5
					}, func() {
						i++
					},
						ʂɘʠ.Combine[int](
							ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
								if true {
									return ʂɘʠ.Bind[int](i,
										ʂɘʠ.Normal[int],
									)
								} else {
									return ʂɘʠ.Break[int]()
								}
							}),

							ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {

								f()
								return ʂɘʠ.Normal[int]()
							}),
						),
					)
				}),

				ʂɘʠ.Return[int](),
			),
		)

	}
	xs := iter2slice(g())
	assertEqual(t, xs, []int{0, 1, 1, 1, 2, 1, 3, 1, 4, 1})
}
