// Code generated by github.com/goghcrow/go-co DO NOT EDIT.
package src

import (
	"testing"

	. "github.com/goghcrow/go-co"
	ʂɘʠ "github.com/goghcrow/go-co/seq"
)

func trivalSwitch() (_ ʂɘʠ.Iterator[int]) {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		{
			a := 1
			switch a {
			case 1:
				return ʂɘʠ.Return[int]()

			case 2:
				return ʂɘʠ.Return[int]()

			default:
				return ʂɘʠ.Return[int]()

			}
		}
	}))
}

func TestSwitchInitNameConflict(t *testing.T) {
	g := func() (_ ʂɘʠ.Iterator[int]) {
		return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			a := 42
			{
				a := a + 1
				switch a {
				case 1:
					assertEqual(t, a, 43)
					return ʂɘʠ.Return[int]()

				case 2:
					assertEqual(t, a, 43)
					return ʂɘʠ.Return[int]()

				default:
					assertEqual(t, a, 43)
					return ʂɘʠ.Return[int]()

				}
			}
		}))
	}
	iter2slice(g())
}

func TestSwitchWithYieldInInit(t *testing.T) {
	g := func() (_ ʂɘʠ.Iterator[int]) {
		return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
				switch 1 {
				case 1:
					return ʂɘʠ.Return[int]()

				case 2:
					return ʂɘʠ.Return[int]()

				default:
					return ʂɘʠ.Return[int]()

				}
			})
		}))
	}
	xs := iter2slice(g())
	assertEqual(t, xs, []int{1})
}

func TestSwitchWithYieldInInitAndCase(t *testing.T) {
	g := func(a int) (_ ʂɘʠ.Iterator[int]) {
		return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Bind[int](a, func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					switch a {
					case 1:
						return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
							return ʂɘʠ.Normal[int]()
						})
					case 2:
						return ʂɘʠ.Bind[int](2, func() ʂɘʠ.Seq[int] {
							return ʂɘʠ.Normal[int]()
						})
					default:
						return ʂɘʠ.Bind[int](42, func() ʂɘʠ.Seq[int] {
							return ʂɘʠ.Normal[int]()
						})
					}
				}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Return[int]()
				}))
			})
		}))

	}
	{
		xs := iter2slice(g(1))
		assertEqual(t, xs, []int{1, 1})
	}
	{
		xs := iter2slice(g(2))
		assertEqual(t, xs, []int{2, 2})
	}
	{
		xs := iter2slice(g(3))
		assertEqual(t, xs, []int{3, 42})
	}
}

func TestSwitchWithYieldInInitAndCaseWithoutDefault(t *testing.T) {
	g := func(a int) (_ ʂɘʠ.Iterator[int]) {
		return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Bind[int](a, func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					switch a {
					case 1:
						return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
							return ʂɘʠ.Normal[int]()
						})
					case 2:
						return ʂɘʠ.Bind[int](2, func() ʂɘʠ.Seq[int] {
							return ʂɘʠ.Normal[int]()
						})
					}
					return ʂɘʠ.Normal[int]()
				}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Return[int]()
				}))
			})
		}))

	}
	{
		xs := iter2slice(g(1))
		assertEqual(t, xs, []int{1, 1})
	}
	{
		xs := iter2slice(g(2))
		assertEqual(t, xs, []int{2, 2})
	}
	{
		xs := iter2slice(g(3))
		assertEqual(t, xs, []int{3})
	}
}

func TestSwitch(t *testing.T) {
	i := 0
	f := func() { i++ }
	g := func(a, b int) (_ ʂɘʠ.Iterator[string]) {
		return ʂɘʠ.Start[string](ʂɘʠ.Delay[string](func() ʂɘʠ.Seq[string] {
			i = 0
			return ʂɘʠ.Combine[string](ʂɘʠ.Delay[string](func() ʂɘʠ.Seq[string] {
				switch a {
				case 1:
					return ʂɘʠ.Combine[string](ʂɘʠ.Delay[string](func() ʂɘʠ.Seq[string] {
						switch b {
						case 1:
							return ʂɘʠ.Bind[string]("11", func() ʂɘʠ.Seq[string] {
								return ʂɘʠ.Normal[string]()
							})
						case 2:
							return ʂɘʠ.Bind[string]("12", func() ʂɘʠ.Seq[string] {
								return ʂɘʠ.Normal[string]()
							})
						default:
							return ʂɘʠ.Bind[string]("1?", func() ʂɘʠ.Seq[string] {
								return ʂɘʠ.Normal[string]()
							})
						}
					}), ʂɘʠ.Delay[string](func() ʂɘʠ.Seq[string] {

						f()
						return ʂɘʠ.Normal[string]()
					}))
				case 2:
					return ʂɘʠ.Combine[string](ʂɘʠ.Delay[string](func() ʂɘʠ.Seq[string] {
						switch b {
						case 1:
							return ʂɘʠ.Bind[string]("21", func() ʂɘʠ.Seq[string] {
								return ʂɘʠ.Normal[string]()
							})
						case 2:
							return ʂɘʠ.Bind[string]("22", func() ʂɘʠ.Seq[string] {
								return ʂɘʠ.Normal[string]()
							})
						default:
							return ʂɘʠ.Bind[string]("2?", func() ʂɘʠ.Seq[string] {
								return ʂɘʠ.Normal[string]()
							})
						}
					}), ʂɘʠ.Delay[string](func() ʂɘʠ.Seq[string] {

						f()
						return ʂɘʠ.Normal[string]()
					}))
				}
				return ʂɘʠ.Normal[string]()
			}), ʂɘʠ.Delay[string](func() ʂɘʠ.Seq[string] {

				f()
				return ʂɘʠ.Combine[string](ʂɘʠ.Delay[string](func() ʂɘʠ.Seq[string] {
					if i == 1 {
						return ʂɘʠ.Bind[string]("f", func() ʂɘʠ.Seq[string] {
							return ʂɘʠ.Normal[string]()
						})
					} else if i == 2 {
						return ʂɘʠ.Bind[string]("ff", func() ʂɘʠ.Seq[string] {
							return ʂɘʠ.Normal[string]()
						})
					} else {

						panic("unexpected")
					}
				}), ʂɘʠ.Delay[string](func() ʂɘʠ.Seq[string] {
					return ʂɘʠ.Return[string]()
				}))
			}))
		}))

	}

	assertEqual(t, iter2slice(g(1, 1)), []string{"11", "ff"})
	assertEqual(t, iter2slice(g(1, 2)), []string{"12", "ff"})
	assertEqual(t, iter2slice(g(1, 3)), []string{"1?", "ff"})
	assertEqual(t, iter2slice(g(2, 1)), []string{"21", "ff"})
	assertEqual(t, iter2slice(g(2, 2)), []string{"22", "ff"})
	assertEqual(t, iter2slice(g(2, 3)), []string{"2?", "ff"})
	assertEqual(t, iter2slice(g(3, 1)), []string{"f"})
}
