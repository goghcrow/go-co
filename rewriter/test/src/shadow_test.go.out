//go:build !co

// Code generated by github.com/goghcrow/go-co DO NOT EDIT.
package src

import (
	ʂɘʠ "github.com/goghcrow/go-co/seq"
	"testing"
)

func forInit() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		i := 0
		return ʂɘʠ.Combine[int](
			ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

				i := 0
				return ʂɘʠ.For[int](func() bool {
					return i < 3
				}, func() {
					i++
				}, ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

					i := i + 1
					return ʂɘʠ.Bind[int](i,
						ʂɘʠ.Normal[int],
					)
				}))
			}),
			ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Bind[int](i,
					ʂɘʠ.Return[int],
				)
			}))
	}))

}

// ↑ is equivalent to ↓
func forInit1() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		i := 0
		return ʂɘʠ.Combine[int](
			ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

				i := 0
				return ʂɘʠ.For[int](func() bool {
					return i < 3
				}, func() {
					i++
				}, ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

					i := i + 1
					return ʂɘʠ.Bind[int](i,
						ʂɘʠ.Normal[int],
					)
				}))
			}),
			ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Bind[int](i,
					ʂɘʠ.Return[int],
				)
			}))
	}))

}

func rangeInit() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		i := 0
		ɪʇ := ʂɘʠ.NewSliceIter([]int{0, 1, 2})
		return ʂɘʠ.Combine[int](
			ʂɘʠ.While[int](
				ɪʇ.MoveNext,
				ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

					i := ɪʇ.Current().Val
					return ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

						i := i + 1
						return ʂɘʠ.Bind[int](i,
							ʂɘʠ.Normal[int],
						)
					})
				})),
			ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Bind[int](i,
					ʂɘʠ.Return[int],
				)
			}))
	}))

}

// ↑ is equivalent to ↓
func rangeInit1() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		i := 0
		ɪʇ := ʂɘʠ.NewSliceIter([]int{0, 1, 2})
		return ʂɘʠ.Combine[int](
			ʂɘʠ.While[int](
				ɪʇ.MoveNext,
				ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

					i := ɪʇ.Current().Val
					return ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {

						i := i + 1
						return ʂɘʠ.Bind[int](i,
							ʂɘʠ.Normal[int],
						)
					})

				})),
			ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				return ʂɘʠ.Bind[int](i,
					ʂɘʠ.Return[int],
				)
			}))
	}))

}

func TestShadow(t *testing.T) {
	assertEqual(t, iter2slice(forInit()), []int{1, 2, 3, 0})
	assertEqual(t, iter2slice(forInit1()), []int{1, 2, 3, 0})
	assertEqual(t, iter2slice(rangeInit()), []int{1, 2, 3, 0})
	assertEqual(t, iter2slice(rangeInit1()), []int{1, 2, 3, 0})
}
