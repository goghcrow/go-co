//go:build !co

// Code generated by github.com/goghcrow/go-co DO NOT EDIT.
package src

import (
	. "github.com/goghcrow/go-co"
	ʂɘʠ "github.com/goghcrow/go-co/seq"
)

func ifIsNotTheLastInBlock_EmptyBranch() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			if true {
			} else {
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			}
			return ʂɘʠ.Normal[int]()
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func ifIsNotTheLastInBlock_TwoBranchesReturn() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			if true {
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			} else {
				return ʂɘʠ.Bind[int](2, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			}
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func ifIsNotTheLastInBlock_MissingBranch1() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			if true {
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			}
			return ʂɘʠ.Normal[int]()
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func ifIsNotTheLastInBlock_MissingBranch2() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			if true {
				return ʂɘʠ.Bind[int](0, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Return[int]()
				})
			}
			return ʂɘʠ.Normal[int]()
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func ifIsNotTheLastInBlock_MissingBranch3() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			if true {
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			} else if true {
				return ʂɘʠ.Bind[int](2, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			}
			return ʂɘʠ.Normal[int]()
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func ifIsNotTheLastInBlock_AllBranchesReturn() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			if true {
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			} else if true {
				return ʂɘʠ.Bind[int](2, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			} else {
				return ʂɘʠ.Bind[int](3, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			}
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func ifIsNotTheLastInBlock_AllBranchesReturn1() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			if true {
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			} else if true {
				return ʂɘʠ.Bind[int](2, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			} else {
				return ʂɘʠ.Bind[int](3, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			}
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func ifIsTheLastInBlock_EmptyBranch1() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				if true {
				} else {
					return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Normal[int]()
					})
				}
				return ʂɘʠ.Normal[int]()
			}))
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func ifIsTheLastInBlock_EmptyBranch2() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			if true {
			} else {
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			}
			return ʂɘʠ.Normal[int]()
		}))
	}))

}

func ifIsTheLastInBlock_TwoBranchesReturn1() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				if true {
					return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Normal[int]()
					})
				} else {
					return ʂɘʠ.Bind[int](2, func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Normal[int]()
					})
				}
			}))
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func ifIsTheLastInBlock_TwoBranchesReturn2() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			if true {
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			} else {
				return ʂɘʠ.Bind[int](2, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			}
		}))
	}))

}

func ifIsTheLastInBlock_MissingBranch11() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				if true {
					return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Normal[int]()
					})
				}
				return ʂɘʠ.Normal[int]()
			}))
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func ifIsTheLastInBlock_MissingBranch12() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			if true {
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			}
			return ʂɘʠ.Normal[int]()
		}))
	}))

}

func ifIsTheLastInBlock_MissingBranch21() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				if true {
					return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Normal[int]()
					})
				} else if true {
					return ʂɘʠ.Bind[int](2, func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Normal[int]()
					})
				}
				return ʂɘʠ.Normal[int]()
			}))
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func ifIsTheLastInBlock_MissingBranch22() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			if true {
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			} else if true {
				return ʂɘʠ.Bind[int](2, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			}
			return ʂɘʠ.Normal[int]()
		}))
	}))

}

func ifIsTheLastInBlock_AllBranchesReturn1() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Combine[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
				if true {
					return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Normal[int]()
					})
				} else if true {
					return ʂɘʠ.Bind[int](2, func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Normal[int]()
					})
				} else {
					return ʂɘʠ.Bind[int](3, func() ʂɘʠ.Seq[int] {
						return ʂɘʠ.Normal[int]()
					})
				}
			}))
		}), ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			return ʂɘʠ.Return[int]()
		}))
	}))

}

func ifIsTheLastInBlock_AllBranchesReturn2() ʂɘʠ.Iterator[int] {
	return ʂɘʠ.Start[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
		return ʂɘʠ.Loop[int](ʂɘʠ.Delay[int](func() ʂɘʠ.Seq[int] {
			if true {
				return ʂɘʠ.Bind[int](1, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			} else if true {
				return ʂɘʠ.Bind[int](2, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			} else {
				return ʂɘʠ.Bind[int](3, func() ʂɘʠ.Seq[int] {
					return ʂɘʠ.Normal[int]()
				})
			}
		}))
	}))

}
